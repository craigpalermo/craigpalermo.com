{"componentChunkName":"component---src-templates-blog-post-js","path":"/slider-perf-demo/","result":{"data":{"site":{"siteMetadata":{"title":"Craig's Blog"}},"markdownRemark":{"id":"8ba49052-7531-57f4-8aef-a05958f263c2","excerpt":"My team recently encountered a problem with a React slider component.\nWe spent a while investigating the root cause, but couldn’t identify\na single source of…","html":"<p>My team recently encountered a problem with a React slider component.\nWe spent a while investigating the root cause, but couldn’t identify\na single source of the problem. However, I noticed that enabling an\nad blocker to prevent 3rd party scripts from loading seemed to help.\nThese scripts (everything from ads to tracking to fraud prevention)\nadded numerous event listeners that would invoke functions on the same\ninteractions that our component in question, in this case a range\nslider, needed to function. This caused the slider to become\nmonetarily unresponsive and drastically decreased frame rates. This\nprevented React from making the necessary DOM updates to reflect user\ninteractions, making it ultimately unusable from a UX\nperspective.</p>\n<p>To see if I could recreate this effect, I wrote a simple application to\nsimulate blocking work on the main thread that would delay React’s\nrendering, causing a framerate drop and the UI to become unresponsive.</p>\n<p>Check out the <a href=\"https://craigpalermo.github.io/slider-perf-demo\">live demo</a>\nand try adjusting the parameters. The effects are especially noticeable\non mobile devices, which we cannot forget to account for in 2019.</p>","frontmatter":{"title":"Effect of Background JS Processes on UX Performance with React","date":"March 10, 2019"}}},"pageContext":{"slug":"/slider-perf-demo/","previous":{"fields":{"slug":"/2019-reading-list/"},"frontmatter":{"title":"Reading List 2019"}},"next":{"fields":{"slug":"/cross-team-collaboration/"},"frontmatter":{"title":"The Importance of Casual Cross-Team Collaboration"}}}}}